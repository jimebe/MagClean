@*@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib
@using System.Diagnostics

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

@code {
    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };

    Layout layout = new Layout
    {
        Title = new Title
        {
            Text = "Scatter"
        },
        YAxis = new List<YAxis>
    {
    new YAxis
    {
    Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
    {
    Text = "Scatter Unit"
    }
    }
    }
    };

    IList<ITrace> data = new List<ITrace>{
    new Scatter
    {
    Name = "ScatterTrace",
    Mode = ModeFlag.Lines | ModeFlag.Markers,
    X = new List<object>(),
    Y = new List<object>()
    }
    };

    private async Task ExtendData(int count = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var max = (int?)scatter.X?.Max();
        var x = 0;
        var y = 1;

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    }

  

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExtendData();
        }
    }

    private async Task Restyle()
    {
        var updateScatterChart = new Scatter
        {
            Name = "Restyled Name"
        };
        await chart.Restyle(updateScatterChart, 0);
    }

    private async Task DeleteScatter()
    {
        await chart.DeleteTrace(0);
    }

    private async Task AddScatter()
    {
        var x = new List<object>() { new Object() };
        var y = new List<object>() { new Object() };        
        await chart.AddTrace(new Scatter
        {

            Name = $"ScatterTrace{data.Count + 1}",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = x,
            Y = y
        });
    }
}
*@