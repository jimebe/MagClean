@using System.Globalization
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Font = Plotly.Blazor.LayoutLib.AnnotationLib.Font

<PlotlyChart style="min-height: 60vh; min-height: 350px" Layout="layout" Config="config" Data="data" Id="HeatMapChart" @ref="plotlyChart" />

@code {
    PlotlyChart plotlyChart;
    Layout layout;
    Config config;
    IList<ITrace> data;

    [Parameter]
    public MagFile File { get; set; }

    /// <inheritdoc />
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        layout = new Layout
        {
            Title = new Plotly.Blazor.LayoutLib.Title
            {
                Text = ""
            },
            Annotations = new List<Annotation>(),
            XAxis = new List<XAxis>
    {
        new ()
        {
            Ticks = TicksEnum.Empty,
            Side = SideEnum.Top
        }
    },
            YAxis = new List<YAxis>
    {
        new ()
        {
            Ticks = Plotly.Blazor.LayoutLib.YAxisLib.TicksEnum.Empty,
            TickSuffix = " ",
        }
    }
        };

        config = new Config
        {
            ShowLink = false,
            Responsive = true,
            DisplayLogo = false
        };
        data = GetMapData();

        AddAnnotations(layout, data.First());
    }

    IList<ITrace> GetMapData()
    {
        IList<ITrace> mapData = new List<ITrace>();
        if (File != null)
        {
            var dataLines = File.Lines.Where(x => !x.Metadata);
            var xMin = dataLines.Min(x => x.EastingRounded);
            var xMax = dataLines.Max(x => x.EastingRounded);
            var yMin = dataLines.Min(x => x.NorthingRounded);
            var yMax = dataLines.Max(x => x.NorthingRounded);

            var xRange = Enumerable.Range(xMin, xMax - xMin).OrderBy(x => x).ToArray();
            var yRange = Enumerable.Range(yMin, yMax - yMin).OrderBy(x => x).ToArray();
            var t1 = yRange.Count();
            var zValues = new int?[yRange.Count()][];
            var highestCount = 0;
            for (int y = 0; y < yRange.Count(); y++)
            {
                var values = new int?[xRange.Count()];
                var yValue = yRange[y];
                for (int x = 0; x < xRange.Count(); x++)
                {
                    var xValue = xRange[x];
                    var count = File.Lines.Where(nr => nr.EastingRounded == xValue && nr.NorthingRounded == yValue).Count();
                    
                    values[x] = count > 0 ? count : null;
                    if (count > highestCount)
                    {
                        highestCount = count;
                    }
                }
                zValues[y] = values;
            }

            var colorRange = Enumerable.Range(yMax, highestCount);
            var colorScale = new string[colorRange.Count()][];
            for (int cs = 0; cs < colorScale.Count(); cs++)
            {
                var hexColor = cs switch
                {
                    >= 5 => "#E74C3C",
                    < 5 and >= 2 => "#F7DC6F",
                    1 => "#EAECEE",
                    _ => "#FDFEFE"
                };
                var color = new[] { cs.ToString(), hexColor };
                colorScale[cs] = color;
            }

            mapData.Add(new HeatMap()
            {
                X = xRange.Cast<object>().ToList(),
                Y = yRange.Cast<object>().ToList(),
                Z = zValues.Cast<object>().ToList(),
                ColorScale = colorScale,
                ShowScale = false
            });
        }

        return mapData;
    }

    static void AddAnnotations(Layout layout, ITrace trace)
    {
        if (trace is not HeatMap { Z: List<object> zValues } heatMap) return;

        for (var i = 0; i < heatMap.Y.Count; i++)
        {
            for (var j = 0; j < heatMap.X.Count; j++)
            {
                var currentValue = ((int?[])zValues[i])[j];
                var textColor = currentValue != 0.0 ? "white" : "black";

                var result = new Annotation
                {
                    XRef = "x1",
                    YRef = "y1",
                    X = heatMap.X[j],
                    Y = heatMap.Y[i],
                    Text = currentValue.HasValue ? currentValue.Value.ToString(CultureInfo.InvariantCulture) : string.Empty,
                    Font = new Font
                    {
                        Family = "Arial",
                        Size = 12,
                        Color = textColor
                    },
                    ShowArrow = false,
                };
                layout.Annotations.Add(result);
            }
        }
    }
}